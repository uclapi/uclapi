"""
Django settings for uclapi project.

Generated by 'django-admin startproject' using Django 1.10.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import re
from distutils.util import strtobool

from django.core.management.utils import get_random_secret_key

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", get_random_secret_key())
if SECRET_KEY == "" or SECRET_KEY is None:
    SECRET_KEY = get_random_secret_key()

# SECURITY WARNING: don't run with debug turned on in production!
# This value should be set by the UCLAPI_PRODUCTION environment
# variable anyway. If in production, debug should be false.
DEBUG = not strtobool(os.environ.get("UCLAPI_PRODUCTION"))

ALLOWED_HOSTS = ["localhost", "127.0.0.1", "testserver"]

# If a domain is specified then make this an allowed host
if os.environ.get("UCLAPI_DOMAIN"):
    ALLOWED_HOSTS.append(os.environ.get("UCLAPI_DOMAIN"))

UCLAPI_DOMAIN_CURRENT = os.environ.get("UCLAPI_DOMAIN")

# Tell Django to listen to the X-FORWARDED headers from Traefik
# https://stackoverflow.com/questions/62047354/build-absolute-uri-with-https-behind-reverse-proxy
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_filters',
    'dashboard',
    'marketplace',
    'roombookings',
    'oauth',
    'timetable',
    'common',
    'corsheaders',
    'workspaces',
    'django_celery_beat',
    'webpack_loader',
    'libcal',
]

MIDDLEWARE = [
    'common.middleware.health_check_middleware.HealthCheckMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'uclapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'uclapi.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django_postgrespool2',
        'NAME': os.environ.get("DB_UCLAPI_NAME"),
        'USER': os.environ.get("DB_UCLAPI_USERNAME"),
        'PASSWORD': os.environ.get("DB_UCLAPI_PASSWORD"),
        'HOST': os.environ.get("DB_UCLAPI_HOST"),
        'PORT': os.environ.get("DB_UCLAPI_PORT"),
    },
    'roombookings': {
        'ENGINE': 'django.db.backends.oracle',
        'NAME': os.environ.get("DB_ROOMS_NAME"),
        'USER': os.environ.get("DB_ROOMS_USERNAME"),
        'PASSWORD': os.environ.get("DB_ROOMS_PASSWORD"),
        'HOST': '',
        'PORT': '',
        'OPTIONS': {'threaded': True}
    },
    'gencache': {
        'ENGINE': 'django_postgrespool2',
        'NAME': os.environ.get("DB_CACHE_NAME"),
        'USER': os.environ.get("DB_CACHE_USERNAME"),
        'PASSWORD': os.environ.get("DB_CACHE_PASSWORD"),
        'HOST': os.environ.get("DB_CACHE_HOST"),
        'PORT': os.environ.get("DB_CACHE_PORT"),
    }
}

# Max connections is pool_size + max_overflow
# Will idle at pool_size connections, overflow are for spikes in traffic

DATABASE_POOL_ARGS = {
    'max_overflow': 15,
    'pool_size': 5,
    'recycle': 300
}

DATABASE_ROUTERS = ['uclapi.dbrouters.ModelRouter']
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

if os.environ.get('SENTRY_DSN'):
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
    from sentry_sdk.integrations.redis import RedisIntegration
    from sentry_sdk.integrations.logging import ignore_logger


    def remove_token(event, _):
        scrubbers_keys = ['token', 'client_secret', 'X-RateLimit-Remaining', 'X-RateLimit-Limit',
                          'X-RateLimit-Retry-After']
        # Regexes: tokens, client id, client secret
        scrubbers_regex = [re.compile(r"(?<=uclapi-)(.*?)(?=&|$|')"), re.compile(r"\d{16}.\d{16}"),
                           re.compile(r"[a-f0-9]{64}")]
        event = recursive_explore(event, scrubbers_keys, scrubbers_regex)
        return event


    def recursive_explore(var, keys, regex):
        if isinstance(var, list):
            return [recursive_explore(v, keys, regex) for v in var]
        if isinstance(var, dict):
            return {k: recursive_explore(v, keys, regex) for k, v in var.items() if k not in keys}
        print(var)
        for reg in regex:
            if reg.search(str(var)):
                var = reg.sub('REDACTED', str(var), 0)
        return var


    sentry_sdk.init(dsn=os.environ.get('SENTRY_DSN'),
                    environment=os.environ.get('SENTRY_DSN_ENV', 'testing'),
                    integrations=[DjangoIntegration(), RedisIntegration()],
                    traces_sample_rate=0.01,
                    send_default_pii=False,
                    before_send=remove_token,
                    release=os.environ.get('UCLAPI_VERSION', None))
    ignore_logger('django.security.DisallowedHost')

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_PAGINATION_CLASS': 'common.pagination.CustomPagination',
    'EXCEPTION_HANDLER': 'common.exception_handler.custom_exception_handler',
    'PAGE_SIZE': 1000
}

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # noqa
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # noqa
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # noqa
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # noqa
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Cross Origin settings
CORS_ORIGIN_ALLOW_ALL = True
CORS_URLS_REGEX = r'^/roombookings/.*$'

# Fair use policy
fair_use_policy_path = os.path.join(
    BASE_DIR,
    'uclapi/UCLAPIAcceptableUsePolicy.txt'
)
with open(fair_use_policy_path, 'r', encoding='utf-8') as fp:
    FAIR_USE_POLICY = list(fp)

REDIS_UCLAPI_HOST = os.environ.get("REDIS_UCLAPI_HOST", "")

# Celery Settings
CELERY_BROKER_URL = 'redis://' + REDIS_UCLAPI_HOST
CELERY_RESULT_BACKEND = 'redis://' + REDIS_UCLAPI_HOST
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

ROOMBOOKINGS_SETID = 'LIVE-22-23'

# This dictates how many Medium articles we scrape
MEDIUM_ARTICLE_QUANTITY = 3

# We need to specify a tuple of STATICFILES_DIRS instead of a
# STATIC_ROOT so that collectstatic picks up the WebPack bundles
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

# S3 file storage settings
# There are three scenarios to consider:
# 1) Local development
#    In local dev,  AWS_S3_STATICS = False
#                   AWS_S3_STATICS_CREDENTIALS_ENABLED = False
#    These allow you to use local statics using /static/ in the
#    same way as you would normally.
# 2) Production
#    In prod,       AWS_S3_STATICS = True
#                   AWS_S3_STATICS_CREDENTIALS_ENABLED = False
#    This means that S3 statics will be used, but no creds are
#    needed on the boxes because web servers should never do
#    uploads to the remote S3 bucket.
# 3) Deployment
#    In deployment, AWS_S3_STATICS = True
#                   AWS_S3_STATICS_CREDENTIALS_ENABLED = True
#    This will be done either from CI/CD or from the computer
#    of a person who has permission to upload new statics to
#    S3.

if strtobool(os.environ.get("AWS_S3_STATICS", "False")):
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    AWS_STORAGE_BUCKET_NAME = os.environ["AWS_S3_BUCKET_NAME"]
    AWS_LOCATION = os.environ["AWS_S3_BUCKET_PATH"]
    AWS_S3_REGION_NAME = os.environ["AWS_S3_REGION"]

    # This is a hack to not require AWS Access Credentials
    # when the system is running in the Cloud. This avoids us from
    # needing to store AWS credentials.
    # https://github.com/jschneier/django-storages/issues/254#issuecomment-329813295  # noqa
    AWS_S3_CUSTOM_DOMAIN = "{}.s3.amazonaws.com".format(
        AWS_STORAGE_BUCKET_NAME
    )

    # We set the default ACL data on all stacks we upload to public-read
    # so that the files are world readable.
    # This is required for the statics to be served up directly.
    # Often this is a security risk, but in this case it's
    # actually required to serve the website.
    AWS_DEFAULT_ACL = "public-read"

    # If credentials are enabled, collectstatic can do uploads
    if strtobool(os.environ["AWS_S3_STATICS_CREDENTIALS_ENABLED"]):
        AWS_ACCESS_KEY_ID = os.environ["AWS_ACCESS_KEY_ID"]
        AWS_SECRET_ACCESS_KEY = os.environ["AWS_SECRET_ACCESS_KEY"]

    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }

    # As the bucket is public we do not need to add authentication to the
    # urls fetching the static files
    AWS_QUERYSTRING_AUTH = False

    # Since we are hosting on AWS, we should set the Static URL to it
    STATIC_URL = "{}/{}".format(
        AWS_S3_CUSTOM_DOMAIN,
        AWS_LOCATION
    )
    # Set up the WebPack loader for remote loading
    WEBPACK_LOADER = {
        'DEFAULT': {
            'CACHE': not DEBUG,
            'BUNDLE_DIR_NAME': './',  # must end with slash
            'STATS_URL': "https://{}webpack-stats.json".format(
                STATIC_URL
            ),
            'POLL_INTERVAL': 0.1,
            'TIMEOUT': None,
            'IGNORE': [r'.+\.hot-update.js', r'.+\.map']
        }
    }
else:
    # https://docs.djangoproject.com/en/1.10/howto/static-files/
    # The default Static URL is /static/ which is fine for when statics
    # have been built and placed into their respective folders.
    STATIC_URL = os.environ.get("STATIC_URL", '/static/')

    # Set up the WebPack loader for local loading
    WEBPACK_LOADER = {
        'DEFAULT': {
            'CACHE': not DEBUG,
            'BUNDLE_DIR_NAME': './',  # must end with slash
            'STATS_FILE': os.path.join(
                BASE_DIR,
                'static',
                'webpack-stats.json'
            ),
            'POLL_INTERVAL': 0.1,
            'TIMEOUT': None,
            'IGNORE': [r'.+\.hot-update.js', r'.+\.map']
        }
    }

TEAMS_BACKEND_WEBHOOK = os.environ.get("TEAMS_BACKEND_WEBHOOK", "")
